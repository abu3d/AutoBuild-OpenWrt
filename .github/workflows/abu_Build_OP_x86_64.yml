#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: eSirPlayground
# Youtube Channel: https://goo.gl/fvkdwm 
#=================================================

name: 云编译20220112Build_x86_64

on: 
  repository_dispatch:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        set +e
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean

    - name: 下载Lede源码
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "src-git ssrp https://github.com/fw876/helloworld.git" >> ./feeds.conf.default
        
    - name: 升级 & 安装 feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        ./scripts/feeds install -a
        
    - name: 导入第三方插件
      working-directory: ./openwrt
      run: |
        git clone https://github.com/xiaorouji/openwrt-passwall.git package/openwrt-passwall
        git clone https://github.com/281677160/openwrt-package.git package/281677160
        git clone https://github.com/sirpdboy/luci-theme-opentopd package/luci-theme-opentopd
  
    - name: argon_new主题
      working-directory: ./openwrt
      run: |
        cd package/lean
        rm -rf luci-theme-argon
        git clone -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git
        
    - name: netdata汉化
      working-directory: ./openwrt
      run: |
        cd package/lean
        rm -rf luci-app-netdata
        git clone https://github.com/sirpdboy/luci-app-netdata.git
       
    - name: Docker
      working-directory: ./openwrt
      run: |
        cd package
        rm -rf luci-app-dockerman
        git clone https://github.com/lisaac/luci-app-dockerman.git
               
    - name: 配置自定义架构 - Build_x86_64
      env:
        CONFIG_FILE: 'x86_64.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x ./customize.sh && ./customize.sh
        cd openwrt && make defconfig
        
    - name: 下载DL库
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: 构建固件
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build."
        make -j$(nproc) V=s
               
    - name: Prepare Files
      run: |
        cd "/home/runner/openwrt"
        cp -f "bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.img" "../openwrt-x86-64-generic-squashfs-combined.img"
        cp -f "bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.vmdk" "../openwrt-x86-64-generic-squashfs-combined.vmdk"
#        cp -f "bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined-efi.img" "../openwrt-x86-64-generic-squashfs-combined-efi.img"
#        cp -f "bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined-efi.vmdk" "../openwrt-x86-64-generic-squashfs-combined-efi.vmdk"

    - name: Prepare Release Zip File
      id: assemble_artifact
      run: |
        cd "/home/runner"
        zip OpenWrt-X86_64.zip openwrt-x86-64-generic-squashfs-combined.img openwrt-x86-64-generic-squashfs-combined.vmdk
        release_tag="X86_64-$(date +%Y-%m-%d)"
        echo "##[set-output name=release_tag;]$release_tag"   
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.assemble_artifact.outputs.release_tag }}
        release_name: Build ${{ steps.assemble_artifact.outputs.release_tag }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /home/runner/OpenWrt-X86_64.zip
        asset_name: OpenWrt-X86_64.zip
        asset_content_type: application/zip
        
    - name : 上传固件
      uses: actions/upload-artifact@master
      with:
        name: OpenWrt
        path: openwrt/bin
